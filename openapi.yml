# Copyright 2019 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: '3.0.0'

info:
  version: 0.1.0
  title: GameroomD API
  description: REST API for GameroomD

servers:
  - url: http://localhost:8000

paths:
  /nodes:
    get:
      tags:
          - Node Registry
      description: List nodes in the Node Registry
      parameters:
        - name: offset
          in: query
          description: paging offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: maximum number of items to return (max 100)
          required: false
          schema:
            type: integer
            default: 100
        - name: filter
          in: query
          description: |
            url-encodeded stringified JSON containing property filters in the format
              {NODE_PROPERTY:[{"operator":OPERATOR,"value":VALUE}]}
          required: false
          schema:
            type: string
          example: "%7B%22company%22%3A%5B%22%3D%22%2C%22Cargill%22%5D%7D"
      responses:
        200:
          description: list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  paging:
                    $ref: '#/components/schemas/Paging'
        400:
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /nodes/{identity}:
      get:
        tags:
          - Node Registry
        description: Fetch a nodes in the Node Registry by their identity
        parameters:
          - name: identity
            in: path
            description: identity of node to fetch
            required: true
            schema:
              type: string
        responses:
          200:
            description: Node
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/Node"
          404:
            description: The node with {identity} was not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'


  /gamerooms/propose:
      post:
        description: Propose a new Gameroom
        requestBody:
          content:
            application/json:
              schema:
                properties:
                  alias:
                    description: Name of new Gameroom
                  member:
                    description: Proposed members of the Gameroom
                required:
                  - alias
                  - member
                example:
                  alias: My_Gameroom
                  member:
                    $ref: '#/components/schemas/Member'

        responses:
          202:
            description: Create Gameroom proposal has been accepted
          500:
            description: Internal server error occurred


components:
  schemas:
    Error:
      additionalProperties: false
      properties:
        message:
          description: A message describing the error that occurred
          type: string
          example: DatabaseError({description})
      required:
        - message


    Member:
      type: object
      properties:
        identity:
          type: string
        metadata:
          $ref: '#/components/schemas/MemberMetadata'


    MemberMetadata:
      type: object
      properties:
        organization:
          type: string
        endpoint:
          type: string


    Node:
      type: object
      properties:
        identity:
          type: string
      additionalProperties: true
      example:
        identity: node-123123-asdf
        company: Cargill
        status: Up


    Paging:
      type: object
      properties:
        current:
          type: string
        offset:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        first:
          type: string
        prev:
          type: string
        next:
          type: string
        last:
          type: string
      example:
        current: /nodes?offset=10&limit=10
        offset: 10
        limit: 10
        total: 50
        first: /nodes?offset=0&limit=10
        prev: /nodes?offset=0&limit=10
        next: /nodes?offset=20&limit=10
        last: /nodes?offset=40&limit=10
